const happyfuntimes = require('happyfuntimes');
const PIXI = require("./node_modules/phaser-ce/build/custom/pixi");
const p2 = require("./node_modules/phaser-ce/build/custom/p2");
const Phaser = require("phaser-ce");

var game = new Phaser.Game(800, 600, Phaser.AUTO, '', {
    preload: preload,
    create: create,
    update: update
});


function preload() {
    game.load.image('sky', 'assets/sky.png');
    game.load.image('ground', 'assets/platform.png');
    game.load.image('star', 'assets/star.png');
    game.load.spritesheet('dude', 'assets/dude.png', 32, 48);
}

var player;
var platforms;
var cursors;

function create() {
    //  We're going to be using physics, so enable the Arcade Physics system
    game.physics.startSystem(Phaser.Physics.ARCADE);

    //  A simple background for our game
    game.add.sprite(0, 0, 'sky');

    //  The platforms group contains the ground and the 2 ledges we can jump on
    platforms = game.add.group();

    //  We will enable physics for any object that is created in this group
    platforms.enableBody = true;

    // Here we create the ground.
    var ground = platforms.create(0, game.world.height - 64, 'ground');

    //  Scale it to fit the width of the game (the original sprite is 400x32 in size)
    ground.scale.setTo(2, 2);

    //  This stops it from falling away when you jump on it
    ground.body.immovable = true;

    //  Now let's create two ledges
    var ledge = platforms.create(400, 400, 'ground');
    ledge.body.immovable = true;

    ledge = platforms.create(-150, 250, 'ground');
    ledge.body.immovable = true;

    // The player and its settings
    player = game.add.sprite(32, game.world.height - 150, 'dude');

    //  We need to enable physics on the player
    game.physics.arcade.enable(player);

    //  Player physics properties. Give the little guy a slight bounce.
    player.body.bounce.y = 0.2;
    player.body.gravity.y = 300;
    player.body.collideWorldBounds = true;

    //  Our two animations, walking left and right.
    player.animations.add('left', [0, 1, 2, 3], 10, true);
    player.animations.add('right', [5, 6, 7, 8], 10, true);

    //  Our controls.
    cursors = game.input.keyboard.createCursorKeys();

}

function update() {

    //  Collide the player and the stars with the platforms
    game.physics.arcade.collide(player, platforms);

    //  Reset the players velocity (movement)
    player.body.velocity.x = 0;

    // if (cursors.left.isDown)
    // {
    //     //  Move to the left
    //     player.body.velocity.x = -150;

    //     player.animations.play('left');
    // }
    // else if (cursors.right.isDown)
    // {
    //     //  Move to the right
    //     player.body.velocity.x = 150;

    //     player.animations.play('right');
    // }
    // else
    // {
    //     //  Stand still
    //     player.animations.stop();

    //     player.frame = 4;
    // }

    //  Allow the player to jump if they are touching the ground.
    if (cursors.up.isDown && player.body.touching.down) {
        player.body.velocity.y = -350;
    }

    if (globals.players.length > 0) {
        // console.log(globals.players[0].position.x);


        if (globals.players[0].position.x < globals.players[0].prevPosition.x) {
            //  Move to the left
            player.body.velocity.x = -150;
            player.animations.play('left');
            globals.players[0].prevPosition.x = globals.players[0].position.x;
        } else if (globals.players[0].position.x > globals.players[0].prevPosition.x) {
            //  Move to the right
            player.body.velocity.x = 150;
            player.animations.play('right');
            globals.players[0].prevPosition.x = globals.players[0].position.x;
        } else {
            //  Stand still
            player.animations.stop();

            player.frame = 4;
        }

    }
}

const globals = {
    itemSize: 15,
    playerId: 0,
    frameCount: 0,
    players: [],
    // ctx: document.querySelector("#playfield").getContext("2d"),
};

function randInt(min, max) {
    if (max === undefined) {
        max = min;
        min = 0;
    }
    return Math.random() * (max - min) + min | 0;
}

function pickRandomPosition() {
    return {
        x: 30 + randInt(800 - 60),
        y: 30 + randInt(600 - 60),
    };
}

// class Goal {
//   constructor() {
//     this.pickGoal();
//     this.radiusesSquared = globals.itemSize * 2 * globals.itemSize;
//   }

//   pickGoal() {
//     this.position = pickRandomPosition();
//   }

//   isHit(otherPosition) {
//     const dx = otherPosition.x - this.position.x;
//     const dy = otherPosition.y - this.position.y;
//     return dx * dx + dy * dy < this.radiusesSquared;
//   }
// }

class Player {
    constructor(netPlayer, name) {
        this.netPlayer = netPlayer;
        this.name = name;
        this.position = pickRandomPosition();
        this.prevPosition = {};
        this.prevPosition.x = this.position.x;
        this.prevPosition.y = this.position.y;

        const hue = randInt(360);
        const sat = randInt(2) * 50 + 50;
        const val = 50;
        this.color = "hsl(" + hue + "," + sat + "%," + val + "%)";

        netPlayer.addEventListener('disconnect', Player.prototype.disconnect.bind(this));
        netPlayer.addEventListener('move', Player.prototype.movePlayer.bind(this));
        netPlayer.sendCmd('color', this.color);
    }

    disconnect() {
        const ndx = globals.players.indexOf(this);
        if (ndx >= 0) {
            globals.players.splice(ndx, 1);
        }
    }

    movePlayer(cmd) {
        this.position.x = Math.floor(cmd.x * 800);
        this.position.y = Math.floor(cmd.y * 600);

        // if (globals.goal.isHit(this.position)) {
        //   // This will generate a 'scored' event on the client (player's smartphone)
        //   // that corresponds to this player.
        //   this.netPlayer.sendCmd('scored', {
        //     points: randInt(5, 11), // 5 to 10 points
        //   });
        //   globals.goal.pickGoal();
        // }
    }
}

const server = new happyfuntimes.GameServer();
// globals.goal = new Goal();

// A new player has arrived.
server.on('playerconnect', function(netPlayer) {
    globals.players.push(new Player(netPlayer, "Player" + (++globals.playerId)));
});

// function drawItem(ctx, position, color) {
//   ctx.fillStyle = color;
//   ctx.beginPath();
//   ctx.arc(position.x, position.y, globals.itemSize, 0, Math.PI * 2);
//   ctx.fill();
// };

// function resize(canvas) {
//   const width = canvas.clientWidth;
//   const height = canvas.clientHeight;
//   if (canvas.width !== width || canvas.height !== height) {
//     canvas.width = width;
//     canvas.height = height;
//   }
// }

// function render() {
//   ++globals.frameCount;

//   const ctx = globals.ctx;

//   resize(ctx.canvas);
//   ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);

//   globals.players.forEach(function(player) {
//     drawItem(ctx, player.position, player.color);
//   });

//   drawItem(ctx, globals.goal.position, (globals.frameCount & 4) ? "red" : "pink");

//   requestAnimationFrame(render);
// };
// requestAnimationFrame(render);